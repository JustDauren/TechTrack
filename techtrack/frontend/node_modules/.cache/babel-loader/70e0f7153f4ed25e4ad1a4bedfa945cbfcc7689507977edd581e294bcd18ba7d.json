{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dauren\\\\PycharmProjects\\\\techtrack\\\\techtrack\\\\frontend\\\\src\\\\contexts\\\\UIContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { setMobileMenuOpen, setCityFilter, setTheme } from '../store/slices/uiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UIContext = /*#__PURE__*/createContext({\n  isMobileMenuOpen: false,\n  toggleMobileMenu: () => {},\n  closeMobileMenu: () => {},\n  currentCity: '',\n  changeCity: () => {},\n  availableCities: [],\n  theme: 'light',\n  toggleTheme: () => {},\n  setThemeMode: () => {},\n  isOnline: true,\n  showNotification: () => {}\n});\nexport const useUI = () => {\n  _s();\n  return useContext(UIContext);\n};\n_s(useUI, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const UIProvider = ({\n  children\n}) => {\n  _s2();\n  const dispatch = useAppDispatch();\n  const {\n    mobileMenuOpen,\n    city,\n    theme,\n    availableCities\n  } = useAppSelector(state => state.ui);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [notification, setNotification] = useState({\n    message: '',\n    type: 'info',\n    visible: false\n  });\n\n  // Monitor online status\n  React.useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Mobile menu functions\n  const toggleMobileMenu = () => {\n    dispatch(setMobileMenuOpen(!mobileMenuOpen));\n  };\n  const closeMobileMenu = () => {\n    dispatch(setMobileMenuOpen(false));\n  };\n\n  // City filter functions\n  const changeCity = cityName => {\n    dispatch(setCityFilter(cityName));\n  };\n\n  // Theme functions\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    dispatch(setTheme(newTheme));\n  };\n  const setThemeMode = themeMode => {\n    dispatch(setTheme(themeMode));\n  };\n\n  // Notification function\n  const showNotification = (message, type = 'info') => {\n    setNotification({\n      message,\n      type,\n      visible: true\n    });\n\n    // Auto-hide after 3 seconds\n    setTimeout(() => {\n      setNotification(prev => ({\n        ...prev,\n        visible: false\n      }));\n    }, 3000);\n  };\n  const value = {\n    isMobileMenuOpen: mobileMenuOpen,\n    toggleMobileMenu,\n    closeMobileMenu,\n    currentCity: city,\n    changeCity,\n    availableCities,\n    theme,\n    toggleTheme,\n    setThemeMode,\n    isOnline,\n    showNotification\n  };\n  return /*#__PURE__*/_jsxDEV(UIContext.Provider, {\n    value: value,\n    children: [children, notification.visible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed bottom-24 left-1/2 transform -translate-x-1/2 mb-4 px-4 py-2 rounded-md shadow-lg z-50\n          ${notification.type === 'success' ? 'bg-green-500' : notification.type === 'error' ? 'bg-red-500' : notification.type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'} text-white`,\n      children: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(UIProvider, \"3i9WoC5/AnNY8VAdRdaeDAnkbZw=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = UIProvider;\nvar _c;\n$RefreshReg$(_c, \"UIProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useAppDispatch","useAppSelector","setMobileMenuOpen","setCityFilter","setTheme","jsxDEV","_jsxDEV","UIContext","isMobileMenuOpen","toggleMobileMenu","closeMobileMenu","currentCity","changeCity","availableCities","theme","toggleTheme","setThemeMode","isOnline","showNotification","useUI","_s","UIProvider","children","_s2","dispatch","mobileMenuOpen","city","state","ui","setIsOnline","navigator","onLine","notification","setNotification","message","type","visible","useEffect","handleOnline","handleOffline","window","addEventListener","removeEventListener","cityName","newTheme","themeMode","setTimeout","prev","value","Provider","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dauren/PycharmProjects/techtrack/techtrack/frontend/src/contexts/UIContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\r\nimport { setMobileMenuOpen, setCityFilter, setTheme, Theme } from '../store/slices/uiSlice';\r\n\r\ninterface UIContextType {\r\n  isMobileMenuOpen: boolean;\r\n  toggleMobileMenu: () => void;\r\n  closeMobileMenu: () => void;\r\n  currentCity: string;\r\n  changeCity: (city: string) => void;\r\n  availableCities: string[];\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n  setThemeMode: (theme: Theme) => void;\r\n  isOnline: boolean;\r\n  showNotification: (message: string, type?: 'success' | 'error' | 'info' | 'warning') => void;\r\n}\r\n\r\nconst UIContext = createContext<UIContextType>({\r\n  isMobileMenuOpen: false,\r\n  toggleMobileMenu: () => {},\r\n  closeMobileMenu: () => {},\r\n  currentCity: '',\r\n  changeCity: () => {},\r\n  availableCities: [],\r\n  theme: 'light',\r\n  toggleTheme: () => {},\r\n  setThemeMode: () => {},\r\n  isOnline: true,\r\n  showNotification: () => {},\r\n});\r\n\r\nexport const useUI = () => useContext(UIContext);\r\n\r\nexport const UIProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { mobileMenuOpen, city, theme, availableCities } = useAppSelector(state => state.ui);\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const [notification, setNotification] = useState<{\r\n    message: string;\r\n    type: 'success' | 'error' | 'info' | 'warning';\r\n    visible: boolean;\r\n  }>({\r\n    message: '',\r\n    type: 'info',\r\n    visible: false,\r\n  });\r\n\r\n  // Monitor online status\r\n  React.useEffect(() => {\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Mobile menu functions\r\n  const toggleMobileMenu = () => {\r\n    dispatch(setMobileMenuOpen(!mobileMenuOpen));\r\n  };\r\n\r\n  const closeMobileMenu = () => {\r\n    dispatch(setMobileMenuOpen(false));\r\n  };\r\n\r\n  // City filter functions\r\n  const changeCity = (cityName: string) => {\r\n    dispatch(setCityFilter(cityName));\r\n  };\r\n\r\n  // Theme functions\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    dispatch(setTheme(newTheme));\r\n  };\r\n\r\n  const setThemeMode = (themeMode: Theme) => {\r\n    dispatch(setTheme(themeMode));\r\n  };\r\n\r\n  // Notification function\r\n  const showNotification = (message: string, type: 'success' | 'error' | 'info' | 'warning' = 'info') => {\r\n    setNotification({\r\n      message,\r\n      type,\r\n      visible: true,\r\n    });\r\n\r\n    // Auto-hide after 3 seconds\r\n    setTimeout(() => {\r\n      setNotification(prev => ({ ...prev, visible: false }));\r\n    }, 3000);\r\n  };\r\n\r\n  const value = {\r\n    isMobileMenuOpen: mobileMenuOpen,\r\n    toggleMobileMenu,\r\n    closeMobileMenu,\r\n    currentCity: city,\r\n    changeCity,\r\n    availableCities,\r\n    theme,\r\n    toggleTheme,\r\n    setThemeMode,\r\n    isOnline,\r\n    showNotification,\r\n  };\r\n\r\n  return (\r\n    <UIContext.Provider value={value}>\r\n      {children}\r\n\r\n      {/* Notification Toast */}\r\n      {notification.visible && (\r\n        <div className={`fixed bottom-24 left-1/2 transform -translate-x-1/2 mb-4 px-4 py-2 rounded-md shadow-lg z-50\r\n          ${notification.type === 'success' ? 'bg-green-500' : \r\n            notification.type === 'error' ? 'bg-red-500' : \r\n            notification.type === 'warning' ? 'bg-yellow-500' : \r\n            'bg-blue-500'} text-white`}>\r\n          {notification.message}\r\n        </div>\r\n      )}\r\n    </UIContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,cAAc,EAAEC,cAAc,QAAQ,gBAAgB;AAC/D,SAASC,iBAAiB,EAAEC,aAAa,EAAEC,QAAQ,QAAe,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgB5F,MAAMC,SAAS,gBAAGV,aAAa,CAAgB;EAC7CW,gBAAgB,EAAE,KAAK;EACvBC,gBAAgB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC1BC,eAAe,EAAEA,CAAA,KAAM,CAAC,CAAC;EACzBC,WAAW,EAAE,EAAE;EACfC,UAAU,EAAEA,CAAA,KAAM,CAAC,CAAC;EACpBC,eAAe,EAAE,EAAE;EACnBC,KAAK,EAAE,OAAO;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;EACrBC,YAAY,EAAEA,CAAA,KAAM,CAAC,CAAC;EACtBC,QAAQ,EAAE,IAAI;EACdC,gBAAgB,EAAEA,CAAA,KAAM,CAAC;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMC,KAAK,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMtB,UAAU,CAACS,SAAS,CAAC;AAAA;AAACa,EAAA,CAApCD,KAAK;AAElB,OAAO,MAAME,UAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACnF,MAAMC,QAAQ,GAAGxB,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEyB,cAAc;IAAEC,IAAI;IAAEZ,KAAK;IAAED;EAAgB,CAAC,GAAGZ,cAAc,CAAC0B,KAAK,IAAIA,KAAK,CAACC,EAAE,CAAC;EAC1F,MAAM,CAACX,QAAQ,EAAEY,WAAW,CAAC,GAAG9B,QAAQ,CAAC+B,SAAS,CAACC,MAAM,CAAC;EAC1D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAI7C;IACDmC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACAxC,KAAK,CAACyC,SAAS,CAAC,MAAM;IACpB,MAAMC,YAAY,GAAGA,CAAA,KAAMT,WAAW,CAAC,IAAI,CAAC;IAC5C,MAAMU,aAAa,GAAGA,CAAA,KAAMV,WAAW,CAAC,KAAK,CAAC;IAE9CW,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IAC/CE,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEF,aAAa,CAAC;IAEjD,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;MAClDE,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEH,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM9B,gBAAgB,GAAGA,CAAA,KAAM;IAC7Be,QAAQ,CAACtB,iBAAiB,CAAC,CAACuB,cAAc,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMf,eAAe,GAAGA,CAAA,KAAM;IAC5Bc,QAAQ,CAACtB,iBAAiB,CAAC,KAAK,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAMU,UAAU,GAAI+B,QAAgB,IAAK;IACvCnB,QAAQ,CAACrB,aAAa,CAACwC,QAAQ,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,MAAM5B,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAM6B,QAAQ,GAAG9B,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDU,QAAQ,CAACpB,QAAQ,CAACwC,QAAQ,CAAC,CAAC;EAC9B,CAAC;EAED,MAAM5B,YAAY,GAAI6B,SAAgB,IAAK;IACzCrB,QAAQ,CAACpB,QAAQ,CAACyC,SAAS,CAAC,CAAC;EAC/B,CAAC;;EAED;EACA,MAAM3B,gBAAgB,GAAGA,CAACgB,OAAe,EAAEC,IAA8C,GAAG,MAAM,KAAK;IACrGF,eAAe,CAAC;MACdC,OAAO;MACPC,IAAI;MACJC,OAAO,EAAE;IACX,CAAC,CAAC;;IAEF;IACAU,UAAU,CAAC,MAAM;MACfb,eAAe,CAACc,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEX,OAAO,EAAE;MAAM,CAAC,CAAC,CAAC;IACxD,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMY,KAAK,GAAG;IACZxC,gBAAgB,EAAEiB,cAAc;IAChChB,gBAAgB;IAChBC,eAAe;IACfC,WAAW,EAAEe,IAAI;IACjBd,UAAU;IACVC,eAAe;IACfC,KAAK;IACLC,WAAW;IACXC,YAAY;IACZC,QAAQ;IACRC;EACF,CAAC;EAED,oBACEZ,OAAA,CAACC,SAAS,CAAC0C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA1B,QAAA,GAC9BA,QAAQ,EAGRU,YAAY,CAACI,OAAO,iBACnB9B,OAAA;MAAK4C,SAAS,EAAE;AACxB,YAAYlB,YAAY,CAACG,IAAI,KAAK,SAAS,GAAG,cAAc,GAChDH,YAAY,CAACG,IAAI,KAAK,OAAO,GAAG,YAAY,GAC5CH,YAAY,CAACG,IAAI,KAAK,SAAS,GAAG,eAAe,GACjD,aAAa,aAAc;MAAAb,QAAA,EAC5BU,YAAY,CAACE;IAAO;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEzB,CAAC;AAAC/B,GAAA,CAhGWF,UAAmD;EAAA,QAC7CrB,cAAc,EAC0BC,cAAc;AAAA;AAAAsD,EAAA,GAF5DlC,UAAmD;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}