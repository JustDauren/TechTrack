{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchFromAPI } from '../services/api';\nconst initialState = {\n  equipment: [],\n  loading: false,\n  error: null\n};\n\n// Добавляем отсутствующий fetchEquipment action creator\nexport const fetchEquipment = createAsyncThunk('equipment/fetchEquipment', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetchFromAPI('/equipment');\n    return response;\n  } catch (error) {\n    return rejectWithValue(error.message || 'Не удалось загрузить оборудование');\n  }\n});\nconst equipmentSlice = createSlice({\n  name: 'equipment',\n  initialState,\n  reducers: {\n    setEquipment: (state, action) => {\n      state.equipment = action.payload;\n      state.loading = false;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchEquipment.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchEquipment.fulfilled, (state, action) => {\n      state.equipment = action.payload;\n      state.loading = false;\n    }).addCase(fetchEquipment.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setEquipment,\n  setLoading,\n  setError\n} = equipmentSlice.actions;\nexport default equipmentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchFromAPI","initialState","equipment","loading","error","fetchEquipment","_","rejectWithValue","response","message","equipmentSlice","name","reducers","setEquipment","state","action","payload","setLoading","setError","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/Dauren/PycharmProjects/techtrack/techtrack/frontend/src/store/slices/equipmentSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { Equipment } from '../types';\r\nimport { fetchFromAPI } from '../services/api';\r\n\r\ninterface EquipmentState {\r\n  equipment: Equipment[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: EquipmentState = {\r\n  equipment: [],\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// Добавляем отсутствующий fetchEquipment action creator\r\nexport const fetchEquipment = createAsyncThunk(\r\n  'equipment/fetchEquipment',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetchFromAPI('/equipment');\r\n      return response;\r\n    } catch (error: any) {\r\n      return rejectWithValue(error.message || 'Не удалось загрузить оборудование');\r\n    }\r\n  }\r\n);\r\n\r\nconst equipmentSlice = createSlice({\r\n  name: 'equipment',\r\n  initialState,\r\n  reducers: {\r\n    setEquipment: (state, action: PayloadAction<Equipment[]>) => {\r\n      state.equipment = action.payload;\r\n      state.loading = false;\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchEquipment.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchEquipment.fulfilled, (state, action) => {\r\n        state.equipment = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchEquipment.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload as string;\r\n      });\r\n  }\r\n});\r\n\r\nexport const { setEquipment, setLoading, setError } = equipmentSlice.actions;\r\nexport default equipmentSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAiBC,gBAAgB,QAAQ,kBAAkB;AAE/E,SAASC,YAAY,QAAQ,iBAAiB;AAQ9C,MAAMC,YAA4B,GAAG;EACnCC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,0BAA0B,EAC1B,OAAOO,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,YAAY,CAAC,YAAY,CAAC;IACjD,OAAOQ,QAAQ;EACjB,CAAC,CAAC,OAAOJ,KAAU,EAAE;IACnB,OAAOG,eAAe,CAACH,KAAK,CAACK,OAAO,IAAI,mCAAmC,CAAC;EAC9E;AACF,CACF,CAAC;AAED,MAAMC,cAAc,GAAGZ,WAAW,CAAC;EACjCa,IAAI,EAAE,WAAW;EACjBV,YAAY;EACZW,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAkC,KAAK;MAC3DD,KAAK,CAACZ,SAAS,GAAGa,MAAM,CAACC,OAAO;MAChCF,KAAK,CAACX,OAAO,GAAG,KAAK;IACvB,CAAC;IACDc,UAAU,EAAEA,CAACH,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACX,OAAO,GAAGY,MAAM,CAACC,OAAO;IAChC,CAAC;IACDE,QAAQ,EAAEA,CAACJ,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACX,OAAO,GAAG,KAAK;IACvB;EACF,CAAC;EACDgB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,cAAc,CAACiB,OAAO,EAAGR,KAAK,IAAK;MAC1CA,KAAK,CAACX,OAAO,GAAG,IAAI;MACpBW,KAAK,CAACV,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDiB,OAAO,CAAChB,cAAc,CAACkB,SAAS,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAACZ,SAAS,GAAGa,MAAM,CAACC,OAAO;MAChCF,KAAK,CAACX,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC,CACDkB,OAAO,CAAChB,cAAc,CAACmB,QAAQ,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACX,OAAO,GAAG,KAAK;MACrBW,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,YAAY;EAAEI,UAAU;EAAEC;AAAS,CAAC,GAAGR,cAAc,CAACe,OAAO;AAC5E,eAAef,cAAc,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}